#!/usr/bin/env python
'''
GLStandardDrawingWindow
----------
**GLStandardDrawingWindow** creates a QGLWidget of my thinking of a
standard window to draw. it handles the minimumSizeHint,sizeHint, initializeGL,
and resizeGLstandard
attributes
----------
        * standard width = 550
        * standard height = 500
        * history a Stack to kep track of the objects drawn on it
        * black background
        * white foreground
'''
import sys
import math

from PyQt5.QtOpenGL import QGLWidget
from PyQt5.QtWidgets import QApplication, QMainWindow, QOpenGLWidget
from PyQt5.QtCore import QSize
import OpenGL.GL as GL
import OpenGL.GLU as GLU
from OpenGL.arrays import vbo
from OpenGL.GL import *
from OpenGL.raw.GL.ARB.vertex_array_object import glGenVertexArrays, \
                                                  glBindVertexArray

class GLStandardDrawingWindow3D(QGLWidget):
    def __init__(self):
        super().__init__()
        # if not color :
        self.color = [58, 90, 41]
        # else:
            # self.color = color
        self.width, self.height = 100.0, 100.0
        # self.resize(self.width, self.height)
       
        # self.initializeGL()
        self.move(100, 100)

    def minimumSizeHint(self):
        return QSize(self.width, self.height)

    def sizeHint(self):
        return QSize(self.width, self.height)

    def initializeGL(self):
        GL.glEnable(GL.GL_DEPTH_TEST)
        GL.glDepthFunc(GL.GL_LESS)
        GL.glClear(GL.GL_COLOR_BUFFER_BIT| GL.GL_DEPTH_BUFFER_BIT)
        GL.glClearColor(0.36, 0.36, 0.36, 1.0)
        GL.glClearDepth(1.0)
        GL.glColor3ub(self.color[0], self.color[1], self.color[2])
        # GL.glMatrixMode(GL.GL_PROJECTION)
        # GL.glLoadIdentity()
        # GL.glOrtho(-1,self.width,-1,self.height,-2,2)
        # GL.glFrustum(-self.width, self.width, - self.height, self.height, 1.0, 40.0)
        # GLU.gluOrtho2D(0, self.width, 0, self.height
        # GL.glMatrixMode(GL.GL_MODELVIEW)
        # GL.glLoadIdentity( )
        # GLU.gluLookAt(0.0, 0.0, - 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)
        # GL.glRotatef( 30.0f, 0.0f, 1.0f, 0.0f)
        # GL.glRotatef( 15.0, 1.0, 0.0, 0.0)
        GL.glFlush()

    def resizeGL(self, w, h):
        self.width, self.height = w, h
        
        GL.glMatrixMode(GL.GL_PROJECTION)
        GL.glLoadIdentity()
        GLU.gluPerspective(45.0, 100, 0.1, 100.0)
        # GL.glOrtho(-1,self.width,-1,self.height,-2,2)
        GL.glFrustum(-self.width, self.width, - self.height, self.height, 1.0, 40.0)
        # GLU.gluOrtho2D(0, self.width, 0, self.height)
        GL.glMatrixMode(GL.GL_MODELVIEW)
        GL.glLoadIdentity( )
        GLU.gluLookAt(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)
        # GL.glRotatef(180.0, 0.0, 1.0, 0.0)
        # GL.glViewport(0, 0, w, h)
        GL.glFlush()
